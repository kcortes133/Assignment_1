# assumptions:
#   input is tab delimited
#   first two indices in line should be thrown away
#   gene in 'locus for gene' will be repeated in the list
#   locus number is unimportant for network
#   gene interactions should be examined across and within all gene sets
#
# limitations:
#   gene interactions only shown if in STRING network
#   only known gene interactions and given genes
#
#   @param fileIn file with genes to be read in
#   @return genes list of genes to check interactions for

def readInput(fileIn):
1.    read fileIn
2.    strip new line characters
3.    turn fileIn into a list by separating at tabs
4.    delete first two column in each row
5.    make genes list one dimensional
6.    return genes

# assumptions:
#   input is organized as protein'\t'protein'\t'weight'\n'
#   protein1:protein2:weight is also represented in the list as protein2:protein1:weight
#
#   limitations:
#   dictionary would not work if the protein:protein interaction was only represented once
#
#   @param   stringFile STRING file of protein-protein interactions
#            organized as protein'\t'protein'\t'weight'\n'
#   @returns interactions dict of protein interactions

def makeInteractionNetwork(stringFile):
1.  read in string file
2.  interactions -> dictionary
3.  for line in file:
4.      gene1 -> first column
5.      gene2 -> second column
6.      weight -> third column
7.      if interactions at gene1 doesnt exist:
8.          interactions[gene1] -> new dictionary where gene2: weight
9.    return interactions dictionary

#   @param   genes list of genes to check interactions for (gotten from readInput(file))
#   @param   interactionsNetwork dict of protein-protein interactions from makeInteractionNetwork(stringFile)
#   @returns geneInteractions dict of gene interactions from input GMT file

def makeNetwork(genes, interactionsNetwork):
1.  geneInteractions -> dictionary
2.  for gene1 in genes:
3.      for gene2 in genes:
4.          if gene1 is in interactionsNetwork and interacting with gene2:
5.              if gene1:gene2 interaction is not in interactionsNetwork
6.                  put gene1:gene2:weight into geneInteractions
7.    return geneInteractions

# Limitations:
#   large gene interaction dictionaries will take a long time to process
#   SIF files dont give weight information beyone naming them with string
#
#   @param   geneInteractions dictionary of gene interactions generated from makeNetwork()
#   @param   outF string file name to write gene interactions dictionary to
#   @returns nothing
def makeNetworkSIF(geneInteractions,outFile):
1.  open outFile
2.  for gene in geneInteractions:
3.      if no interactions:
4.          write gene on new line
5.      else:
6.          for interaction in geneInteractions:
7.              write gene, weight, interaction separated by tabs
8.  close file